apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.wzhy.ndkdemo1"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        /*不要修改此变量的值，表示使用NDK编译功能，注意：gradle.properities中的Android。useDeprecatedNdk必须设置成true*/
        def openNdk = true

        /*是否用自己的mk文件（Android.mk和Application.mk），为true时必须（在src/main/jni目录）写自己的mk文件。根据自己喜好修改此变量*/
        def useCustomMk = false

        if (openNdk) {
            /*如果用自己的mk文件编译so生成目录"app/src/libs"*/
            if (useCustomMk) {

                sourceSets.main{
                    //set .so files directory to libs
                    jniLibs.srcDir 'src/main/libs'
                    //disable automatic ndk-build call禁用自动执行ndk-build
                    jni.srcDirs = []

                    //或
                    //jniLibs.srcDirs = ['src/main/libs']
                }

                // 得到ndk路径见 local.properties中定义的ndk.src
                def ndkDir = project.plugins.findPlugin('com.android.application').sdkHandler.getNdkFolder()
                //定义编译的task
                task buildNative(type: Exec) {
                    //路径为自己NDK所在位置,见 local.properties中定义的ndk.src
                    commandLine "$ndkDir/ndk-build.cmd", '-C', file('src/main').absolutePath

                }

                tasks.withType(JavaCompile) {
                    compileTask -> compileTask.dependsOn buildNative
                }

            } else {
                // 如果用自己写的mk文件编译so生成目录 "app/build/intermediaters/ndk/debug"
                // 如果不用自己写的mk文件编译
                // ndk不用自定义mk文件自动编译（系统会自动在app/build/intermediaters/ndk/debug目录生成Android.mk文件,并自动关联app/src/main/jni下的c/c++源码,编译完成后的so和临时文件也会在这个目录下生成）的配置
                ndk {
                    stl "gnustl_static"         // 设置支持标准的C++库比如#include <string>中的一些方法
                    moduleName "ndk_test"         //修改此处：生成的so名字,同Android.mk中的LOCAL_MODULE
                    abiFilters "armeabi", "armeabi-v7a", "x86", "mips", "arm64-v8a", "mips64", "x86_64"
                    //输出指定三种abi体系结构下的so库(armeabi，armeabi-v7a，x86，mips，arm64-v8a，mips64，x86_64)。同Application.mk中的APP_ABI}
                }
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    testCompile 'junit:junit:4.12'
}
